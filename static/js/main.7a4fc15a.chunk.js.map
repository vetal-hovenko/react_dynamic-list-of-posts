{"version":3,"sources":["utils/fetchClient.ts","utils/api.ts","components/NewCommentForm.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","InputType","client","usersFromApi","users","catch","Error","PostsList","posts","selectedPost","setSelectedPost","setComments","setIsCommentLoading","setCommentsError","handleOpenPost","post","postId","id","comments","finally","className","map","title","isPostSelected","type","onClick","Loader","NewCommentForm","useState","name","email","fields","setFields","nameError","emailError","bodyError","errors","setErrors","isCommentAddLoading","setIsCommentAddLoading","handleInput","useCallback","event","NAME","prevFields","target","value","prevErrors","EMAIL","BODY","formSubmit","preventDefault","comment","validName","replace","validEmail","isEmail","validBody","newComment","createdComment","prevComments","formReset","onSubmit","onReset","htmlFor","onChange","placeholder","cn","PostDetails","isCommentLoading","commentsError","isFormOpened","setIsFormOpened","useEffect","handleDeleteComment","commentId","updatedComments","filter","deleteComment","length","href","UserSelector","selectedUser","setSelectedUser","setPosts","setIsLoading","setPostsLoadingError","isActive","setIsActive","setUsers","dropdownRef","useRef","newUsers","handleOutsideClick","current","contains","document","addEventListener","removeEventListener","userPick","user","userId","postsFromAPI","ref","role","singleUser","App","isLoading","postsLoadingError","classNames","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7a4fc15a.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from './fetchClient';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nexport const getUsers = (url: string) => {\n  return client.get<User[]>(url);\n};\n\nexport const getPostsByUser = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = (postId: number, comment: Comment) => {\n  return client.post<Comment>(`/comments?postId=${postId}`, comment);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const usersFromApi = getUsers('/users')\n  .then((users) => users)\n  .catch(() => {\n    throw new Error('Unable to get users');\n  });\n","import React, { useCallback, useState } from 'react';\nimport cn from 'classnames';\nimport isEmail from 'validator/lib/isEmail';\nimport { Comment } from '../types/Comment';\nimport { postComment } from '../utils/api';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  setComments: React.Dispatch<React.SetStateAction<Comment[] | null>>;\n  selectedPost: Post | null;\n}\n\nenum InputType {\n  NAME = 'name',\n  EMAIL = 'email',\n  BODY = 'body',\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  setComments,\n  selectedPost,\n}) => {\n  const [fields, setFields] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const [errors, setErrors] = useState({\n    nameError: false,\n    emailError: false,\n    bodyError: false,\n  });\n\n  const [\n    isCommentAddLoading,\n    setIsCommentAddLoading,\n  ] = useState<boolean>(false);\n\n  const handleInput = useCallback((event: React.ChangeEvent<HTMLInputElement\n  | HTMLTextAreaElement>,\n  type: InputType) => {\n    switch (type) {\n      case InputType.NAME: {\n        setFields((prevFields) => ({\n          ...prevFields,\n          name: event.target.value,\n        }));\n\n        setErrors(prevErrors => ({\n          ...prevErrors,\n          nameError: false,\n        }));\n\n        break;\n      }\n\n      case InputType.EMAIL: {\n        setFields((prevFields) => ({\n          ...prevFields,\n          email: event.target.value,\n        }));\n\n        setErrors(prevErrors => ({\n          ...prevErrors,\n          emailError: false,\n        }));\n\n        break;\n      }\n\n      case InputType.BODY: {\n        setFields((prevFields) => ({\n          ...prevFields,\n          body: event.target.value,\n        }));\n\n        setErrors(prevErrors => ({\n          ...prevErrors,\n          bodyError: false,\n        }));\n\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n  }, []);\n\n  const { name, email, body } = fields;\n  const { nameError, emailError, bodyError } = errors;\n\n  const formSubmit = useCallback((event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const validName = name.replace(/\\s/g, '') !== '';\n    const validEmail = isEmail(email);\n    const validBody = body.replace(/\\s/g, '') !== '';\n\n    if (!validName) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        nameError: true,\n      }));\n    }\n\n    if (!validEmail) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        emailError: true,\n      }));\n    }\n\n    if (!validBody) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        bodyError: true,\n      }));\n    }\n\n    if (validName && validEmail && validBody && selectedPost) {\n      setIsCommentAddLoading(true);\n      const newComment = {\n        id: 0,\n        postId: selectedPost.id,\n        name,\n        email,\n        body,\n      };\n\n      postComment(selectedPost.id, newComment)\n        .then((createdComment) => {\n          setComments((prevComments) => [\n            ...prevComments as Comment[],\n            createdComment,\n          ]);\n        })\n        .catch(() => {\n          throw new Error('Failed to create comment');\n        })\n        .finally(() => {\n          setIsCommentAddLoading(false);\n          setFields({\n            name: '',\n            email: '',\n            body: '',\n          });\n        });\n    }\n  }, [name, email, body, selectedPost]);\n\n  const formReset = useCallback(() => {\n    setFields({\n      name: '',\n      email: '',\n      body: '',\n    });\n\n    setErrors({\n      nameError: false,\n      emailError: false,\n      bodyError: false,\n    });\n  }, []);\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => formSubmit(event)}\n      onReset={() => formReset()}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            value={name}\n            onChange={(event) => handleInput(event, InputType.NAME)}\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={`input ${cn({ 'is-danger': nameError })}`}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError\n          && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError\n        && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            value={email}\n            onChange={(event) => handleInput(event, InputType.EMAIL)}\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={`input ${cn({ 'is-danger': emailError })}`}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError\n          && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError\n        && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            value={body}\n            onChange={(event) => handleInput(event, InputType.BODY)}\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={`textarea ${cn({ 'is-danger': bodyError })}`}\n          />\n        </div>\n\n        {bodyError\n        && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button type=\"submit\" className={`button is-link ${cn({ 'is-loading': isCommentAddLoading })}`}>\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { getComments } from '../utils/api';\n\ninterface Props {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>;\n  setComments: React.Dispatch<React.SetStateAction<Comment[] | null>>;\n  setIsCommentLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  setCommentsError: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n  setComments,\n  setIsCommentLoading,\n  setCommentsError,\n}) => {\n  const handleOpenPost = (post: Post) => {\n    setSelectedPost(post);\n    setIsCommentLoading(true);\n\n    getComments(post.id)\n      .then((comments) => {\n        setComments(comments);\n      })\n      .catch(() => setCommentsError(true))\n      .finally(() => setIsCommentLoading(false));\n\n    if (selectedPost && selectedPost.id === post.id) {\n      setSelectedPost(null);\n      setComments(null);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => {\n            const { id, title } = post;\n            const isPostSelected = id === selectedPost?.id;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={`button ${\n                      isPostSelected\n                        ? 'is-link'\n                        : 'is-light'\n                    }`}\n                    onClick={() => handleOpenPost(post)}\n                  >\n                    {isPostSelected\n                      ? 'Close'\n                      : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { deleteComment } from '../utils/api';\n\ninterface Props {\n  selectedPost: Post | null;\n  comments: Comment[] | null;\n  isCommentLoading: boolean;\n  setComments: React.Dispatch<React.SetStateAction<Comment[] | null>>;\n  commentsError: boolean\n}\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  comments,\n  isCommentLoading,\n  setComments,\n  commentsError,\n}) => {\n  const [isFormOpened, setIsFormOpened] = useState<boolean>(false);\n\n  useEffect(() => {\n    setIsFormOpened(false);\n  }, [selectedPost]);\n\n  const handleDeleteComment = (commentId: number) => {\n    if (comments) {\n      const updatedComments = comments\n        .filter(comment => comment.id !== commentId);\n\n      setComments(updatedComments);\n    }\n\n    deleteComment(commentId);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentLoading ? (\n            <Loader />\n          ) : (\n            <>\n\n              {commentsError && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              )}\n\n              {comments?.length === 0 ? (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              ) : (\n                <>\n                  <p className=\"title is-4\">Comments:</p>\n                  {comments?.map((comment) => {\n                    const {\n                      id,\n                      name,\n                      body,\n                      email,\n                    } = comment;\n\n                    return (\n                      <article\n                        key={id}\n                        className=\"message is-small\"\n                        data-cy=\"Comment\"\n                      >\n                        <div className=\"message-header\">\n                          <a\n                            href={`mailto:${email}`}\n                            data-cy=\"CommentAuthor\"\n                          >\n                            {name}\n                          </a>\n                          <button\n                            data-cy=\"CommentDelete\"\n                            type=\"button\"\n                            className=\"delete is-small\"\n                            aria-label=\"delete\"\n                            onClick={() => handleDeleteComment(id)}\n                          >\n                            delete button\n                          </button>\n                        </div>\n\n                        <div className=\"message-body\" data-cy=\"CommentBody\">\n                          {body}\n                        </div>\n                      </article>\n                    );\n                  })}\n                </>\n              )}\n              {(!commentsError && !isFormOpened)\n              && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setIsFormOpened(true)}\n                >\n                  Write a comment\n                </button>\n              )}\n            </>\n          )}\n        </div>\n\n        {isFormOpened\n        && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            setComments={setComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { getPostsByUser, usersFromApi } from '../utils/api';\n\ninterface Props {\n  selectedUser: User | null;\n\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>;\n  setPosts: React.Dispatch<React.SetStateAction<Post[] | null>>;\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  setPostsLoadingError: React.Dispatch<React.SetStateAction<boolean>>;\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>\n}\n\nexport const UserSelector: React.FC<Props> = ({\n  selectedUser,\n  setSelectedUser,\n  setPosts,\n  setIsLoading,\n  setPostsLoadingError,\n  setSelectedPost,\n}) => {\n  const [isActive, setIsActive] = useState<boolean>(false);\n  const [users, setUsers] = useState<User[]>([]);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    usersFromApi\n      .then((newUsers) => {\n        setUsers(newUsers);\n      });\n  }, []);\n\n  useEffect(() => {\n    const handleOutsideClick = (event: MouseEvent) => {\n      if (dropdownRef.current\n        && !dropdownRef.current.contains(event.target as Node)) {\n        setIsActive(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleOutsideClick);\n\n    return () => {\n      document.removeEventListener('mousedown', handleOutsideClick);\n    };\n  }, []);\n\n  const userPick = (user: User) => {\n    setSelectedUser(user);\n    setIsActive(false);\n    setIsLoading(true);\n    setPosts(null);\n    setSelectedPost(null);\n\n    getPostsByUser(user.id)\n      .then((postsFromAPI) => {\n        setPosts(postsFromAPI);\n      })\n      .catch(() => setPostsLoadingError(true))\n      .finally(() => setIsLoading(false));\n  };\n\n  return (\n    <div\n      ref={dropdownRef}\n      data-cy=\"UserSelector\"\n      className={`dropdown ${cn({ 'is-active': isActive })}`}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActive(!isActive)}\n        >\n          <span>{selectedUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users.map((singleUser) => (\n            <a\n              href={`#user-${singleUser.id}`}\n              key={singleUser.id}\n              className={`dropdown-item ${cn({\n                'is-active': singleUser.id === selectedUser?.id,\n              })}`}\n              onClick={() => userPick(singleUser)}\n            >\n              {singleUser.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Loader } from './components/Loader';\nimport { UserSelector } from './components/UserSelector';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [isCommentLoading, setIsCommentLoading] = useState<boolean>(false);\n  const [postsLoadingError, setPostsLoadingError] = useState<boolean>(false);\n  const [commentsError, setCommentsError] = useState<boolean>(false);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setPosts={setPosts}\n                  setIsLoading={setIsLoading}\n                  setPostsLoadingError={setPostsLoadingError}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser\n                && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {postsLoadingError\n                && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {posts && posts.length === 0\n                && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {posts && posts.length > 0\n                && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                    setComments={setComments}\n                    setIsCommentLoading={setIsCommentLoading}\n                    setCommentsError={setCommentsError}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  comments={comments}\n                  setComments={setComments}\n                  isCommentLoading={isCommentLoading}\n                  commentsError={commentsError}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}