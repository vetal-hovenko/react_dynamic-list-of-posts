{"version":3,"sources":["utils/fetchClient.ts","components/NewCommentForm.tsx","components/PostsList.tsx","utils/api.ts","components/Loader/Loader.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","InputType","client","PostsList","posts","selectedPost","setSelectedPost","setComments","setIsCommentLoading","setCommentsError","handleOpenPost","post","postId","id","comments","catch","finally","className","map","title","isPostSelected","type","onClick","Loader","NewCommentForm","useState","name","setName","email","setEmail","setBody","isCommentAddLoading","setIsCommentAddLoading","nameError","setNameError","emailError","setEmailError","bodyError","setBodyError","handleInput","useCallback","event","NAME","target","value","EMAIL","BODY","formSubmit","preventDefault","comment","validName","replace","validEmail","isEmail","validBody","newComment","createdComment","prevComments","error","console","formReset","onSubmit","onReset","htmlFor","onChange","placeholder","cn","PostDetails","isCommentLoading","commentsError","isFormOpened","setIsFormOpened","useMemo","handleDeleteComment","commentId","updatedComments","filter","deleteComment","length","href","UserSelector","users","selectedUser","setSelectedUser","setPosts","setIsLoading","setPostsLoadingError","isActive","setIsActive","dropdownRef","useRef","useEffect","handleOutsideClick","current","contains","document","addEventListener","removeEventListener","userPick","user","userId","postsFromAPI","ref","role","singleUser","App","setUsers","isLoading","postsLoadingError","usersFromAPI","classNames","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7e4cde65.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","/* eslint-disable no-console */\nimport React, { useCallback, useState } from 'react';\nimport cn from 'classnames';\nimport isEmail from 'validator/lib/isEmail';\nimport { Comment } from '../types/Comment';\nimport { postComment } from '../utils/api';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  setComments: React.Dispatch<React.SetStateAction<Comment[] | null>>;\n  selectedPost: Post | null;\n}\n\nenum InputType {\n  NAME = 'name',\n  EMAIL = 'email',\n  BODY = 'body',\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  setComments,\n  selectedPost,\n}) => {\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [body, setBody] = useState<string>('');\n  const [isCommentAddLoading,\n    setIsCommentAddLoading] = useState<boolean>(false);\n\n  const [nameError, setNameError] = useState<boolean>(false);\n  const [emailError, setEmailError] = useState<boolean>(false);\n  const [bodyError, setBodyError] = useState<boolean>(false);\n\n  const handleInput = useCallback((event: React.ChangeEvent<HTMLInputElement\n  | HTMLTextAreaElement>,\n  type: InputType) => {\n    switch (type) {\n      case InputType.NAME: {\n        setName(event.target.value);\n        if (nameError) {\n          setNameError(false);\n        }\n\n        break;\n      }\n\n      case InputType.EMAIL: {\n        setEmail(event.target.value);\n        setEmailError(false);\n        break;\n      }\n\n      case InputType.BODY: {\n        setBody(event.target.value);\n        setBodyError(false);\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n  }, [name, email, body]);\n\n  const formSubmit = useCallback((event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const validName = name.replace(/\\s/g, '') !== '';\n    const validEmail = isEmail(email);\n    const validBody = body.replace(/\\s/g, '') !== '';\n\n    if (!validName) {\n      setNameError(true);\n    }\n\n    if (!validEmail) {\n      setEmailError(true);\n    }\n\n    if (!validBody) {\n      setBodyError(true);\n    }\n\n    if (validName && validEmail && validBody && selectedPost) {\n      setIsCommentAddLoading(true);\n      const newComment = {\n        id: 0,\n        postId: selectedPost.id,\n        name,\n        email,\n        body,\n      };\n\n      postComment(selectedPost.id, newComment)\n        .then((createdComment) => {\n          setComments((prevComments) => [\n            ...prevComments as Comment[],\n            createdComment,\n          ]);\n        })\n        .catch((error) => {\n          console.error('Error posting comment:', error);\n        })\n        .finally(() => {\n          setIsCommentAddLoading(false);\n          setBody('');\n        });\n    }\n  }, [name, email, body, selectedPost]);\n\n  const formReset = useCallback(() => {\n    setName('');\n    setEmail('');\n    setBody('');\n\n    setNameError(false);\n    setEmailError(false);\n    setBodyError(false);\n  }, []);\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => formSubmit(event)}\n      onReset={() => formReset()}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            value={name}\n            onChange={(event) => handleInput(event, InputType.NAME)}\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={`input ${cn({ 'is-danger': nameError })}`}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError\n          && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError\n        && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            value={email}\n            onChange={(event) => handleInput(event, InputType.EMAIL)}\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={`input ${cn({ 'is-danger': emailError })}`}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError\n          && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError\n        && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            value={body}\n            onChange={(event) => handleInput(event, InputType.BODY)}\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={`textarea ${cn({ 'is-danger': bodyError })}`}\n          />\n        </div>\n\n        {bodyError\n        && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button type=\"submit\" className={`button is-link ${cn({ 'is-loading': isCommentAddLoading })}`}>\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { getComments } from '../utils/api';\n\ninterface Props {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>;\n  setComments: React.Dispatch<React.SetStateAction<Comment[] | null>>;\n  setIsCommentLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  setCommentsError: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n  setComments,\n  setIsCommentLoading,\n  setCommentsError,\n}) => {\n  const handleOpenPost = (post: Post) => {\n    setSelectedPost(post);\n    setIsCommentLoading(true);\n\n    getComments(post.id)\n      .then((comments) => {\n        setComments(comments);\n      })\n      .catch(() => setCommentsError(true))\n      .finally(() => setIsCommentLoading(false));\n\n    if (selectedPost && selectedPost.id === post.id) {\n      setSelectedPost(null);\n      setComments(null);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => {\n            const { id, title } = post;\n            const isPostSelected = id === selectedPost?.id;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={`button ${\n                      isPostSelected\n                        ? 'is-link'\n                        : 'is-light'\n                    }`}\n                    onClick={() => handleOpenPost(post)}\n                  >\n                    {isPostSelected\n                      ? 'Close'\n                      : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { client } from './fetchClient';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nexport const getUsers = (url: string) => {\n  return client.get<User[]>(url);\n};\n\nexport const getPostsByUser = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = (postId: number, comment: Comment) => {\n  return client.post<Comment>(`/comments?postId=${postId}`, comment);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useMemo, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { deleteComment } from '../utils/api';\n\ninterface Props {\n  selectedPost: Post | null;\n  comments: Comment[] | null;\n  isCommentLoading: boolean;\n  setComments: React.Dispatch<React.SetStateAction<Comment[] | null>>;\n  commentsError: boolean\n}\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  comments,\n  isCommentLoading,\n  setComments,\n  commentsError,\n}) => {\n  const [isFormOpened, setIsFormOpened] = useState<boolean>(false);\n\n  useMemo(() => {\n    setIsFormOpened(false);\n  }, [selectedPost]);\n\n  const handleDeleteComment = (commentId: number) => {\n    if (comments) {\n      const updatedComments = comments\n        .filter(comment => comment.id !== commentId);\n\n      setComments(updatedComments);\n    }\n\n    deleteComment(commentId);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentLoading ? (\n            <Loader />\n          ) : (\n            <>\n\n              {commentsError && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              )}\n\n              {comments?.length === 0 ? (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              ) : (\n                <>\n                  <p className=\"title is-4\">Comments:</p>\n                  {comments?.map((comment) => {\n                    const {\n                      id,\n                      name,\n                      body,\n                      email,\n                    } = comment;\n\n                    return (\n                      <article\n                        key={id}\n                        className=\"message is-small\"\n                        data-cy=\"Comment\"\n                      >\n                        <div className=\"message-header\">\n                          <a\n                            href={`mailto:${email}`}\n                            data-cy=\"CommentAuthor\"\n                          >\n                            {name}\n                          </a>\n                          <button\n                            data-cy=\"CommentDelete\"\n                            type=\"button\"\n                            className=\"delete is-small\"\n                            aria-label=\"delete\"\n                            onClick={() => handleDeleteComment(id)}\n                          >\n                            delete button\n                          </button>\n                        </div>\n\n                        <div className=\"message-body\" data-cy=\"CommentBody\">\n                          {body}\n                        </div>\n                      </article>\n                    );\n                  })}\n                </>\n              )}\n              {(!commentsError && !isFormOpened)\n              && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setIsFormOpened(true)}\n                >\n                  Write a comment\n                </button>\n              )}\n            </>\n          )}\n        </div>\n\n        {isFormOpened\n        && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            setComments={setComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { getPostsByUser } from '../utils/api';\n\ninterface Props {\n  users: User[];\n  selectedUser: User | null;\n\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>;\n  setPosts: React.Dispatch<React.SetStateAction<Post[] | null>>;\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  setPostsLoadingError: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n  setPosts,\n  setIsLoading,\n  setPostsLoadingError,\n}) => {\n  const [isActive, setIsActive] = useState<boolean>(false);\n\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleOutsideClick = (event: MouseEvent) => {\n      if (dropdownRef.current\n        && !dropdownRef.current.contains(event.target as Node)) {\n        setIsActive(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleOutsideClick);\n\n    return () => {\n      document.removeEventListener('mousedown', handleOutsideClick);\n    };\n  }, []);\n\n  const userPick = (user: User) => {\n    setSelectedUser(user);\n    setIsActive(false);\n    setIsLoading(true);\n    setPosts(null);\n\n    getPostsByUser(user.id)\n      .then((postsFromAPI) => {\n        setPosts(postsFromAPI);\n      })\n      .catch(() => setPostsLoadingError(true))\n      .finally(() => setIsLoading(false));\n  };\n\n  return (\n    <div\n      ref={dropdownRef}\n      data-cy=\"UserSelector\"\n      className={`dropdown ${cn({ 'is-active': isActive })}`}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActive(!isActive)}\n        >\n          <span>{selectedUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users.map((singleUser) => (\n            <a\n              href={`#user-${singleUser.id}`}\n              key={singleUser.id}\n              className={`dropdown-item ${cn({\n                'is-active': singleUser.id === selectedUser?.id,\n              })}`}\n              onClick={() => userPick(singleUser)}\n            >\n              {singleUser.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Loader } from './components/Loader';\nimport { UserSelector } from './components/UserSelector';\nimport { getUsers } from './utils/api';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [isCommentLoading, setIsCommentLoading] = useState<boolean>(false);\n  const [postsLoadingError, setPostsLoadingError] = useState<boolean>(false);\n  const [commentsError, setCommentsError] = useState<boolean>(false);\n\n  useEffect(() => {\n    getUsers('/users')\n      .then((usersFromAPI) => {\n        setUsers(usersFromAPI);\n      });\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setPosts={setPosts}\n                  setIsLoading={setIsLoading}\n                  setPostsLoadingError={setPostsLoadingError}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser\n                && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {postsLoadingError\n                && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {posts && posts.length === 0\n                && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {posts && posts.length > 0\n                && (\n                  <PostsList\n                    posts={posts !== null ? posts : []}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                    setComments={setComments}\n                    setIsCommentLoading={setIsCommentLoading}\n                    setCommentsError={setCommentsError}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  comments={comments}\n                  setComments={setComments}\n                  isCommentLoading={isCommentLoading}\n                  commentsError={commentsError}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}